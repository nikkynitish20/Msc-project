{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yNfoOKXqp22o",
        "outputId": "4adfba0f-d010-4443-aaf5-b6236e39b934"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('/content/drive/MyDrive/Nitish Dataset/train.csv')\n",
        "\n",
        "# Display basic information and first few rows\n",
        "df_info = df.info()\n",
        "df_head = df.head()\n",
        "\n",
        "df_info, df_head\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZEUauRTLqaGn",
        "outputId": "c78fe3cd-97e8-4a05-847c-8132e5e80c39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 24783 entries, 0 to 24782\n",
            "Data columns (total 6 columns):\n",
            " #   Column                    Non-Null Count  Dtype \n",
            "---  ------                    --------------  ----- \n",
            " 0   count                     24783 non-null  int64 \n",
            " 1   hate_speech_count         24783 non-null  int64 \n",
            " 2   offensive_language_count  24783 non-null  int64 \n",
            " 3   neither_count             24783 non-null  int64 \n",
            " 4   class                     24783 non-null  int64 \n",
            " 5   tweet                     24783 non-null  object\n",
            "dtypes: int64(5), object(1)\n",
            "memory usage: 1.1+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(None,\n",
              "    count  hate_speech_count  offensive_language_count  neither_count  class  \\\n",
              " 0      3                  0                         0              3      2   \n",
              " 1      3                  0                         3              0      1   \n",
              " 2      3                  0                         3              0      1   \n",
              " 3      3                  0                         2              1      1   \n",
              " 4      6                  0                         6              0      1   \n",
              " \n",
              "                                                tweet  \n",
              " 0  !!! RT @mayasolovely: As a woman you shouldn't...  \n",
              " 1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...  \n",
              " 2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...  \n",
              " 3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...  \n",
              " 4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...  )"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import string\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "# Download stopwords if not already\n",
        "nltk.download('stopwords')\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "# Define a preprocessing function\n",
        "def preprocess_text(text):\n",
        "    # Lowercase\n",
        "    text = text.lower()\n",
        "    # Remove URLs\n",
        "    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', text, flags=re.MULTILINE)\n",
        "    # Remove user mentions and hashtags\n",
        "    text = re.sub(r'\\@\\w+|\\#', '', text)\n",
        "    # Remove punctuation\n",
        "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
        "    # Remove numbers\n",
        "    text = re.sub(r'\\d+', '', text)\n",
        "    # Remove stopwords\n",
        "    text = ' '.join([word for word in text.split() if word not in stop_words])\n",
        "    return text\n",
        "\n",
        "# Apply preprocessing to the tweet column\n",
        "df['cleaned_tweet'] = df['tweet'].apply(preprocess_text)\n",
        "df.T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "P0nvZwAQr1sv",
        "outputId": "3d1c93d3-61cd-4206-980e-79ba444ce4c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                                      0      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  0   \n",
              "neither_count                                                             3   \n",
              "class                                                                     2   \n",
              "tweet                     !!! RT @mayasolovely: As a woman you shouldn't...   \n",
              "cleaned_tweet             rt woman shouldnt complain cleaning house amp ...   \n",
              "\n",
              "                                                                      1      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!! RT @mleew17: boy dats cold...tyga dwn ba...   \n",
              "cleaned_tweet             rt boy dats coldtyga dwn bad cuffin dat hoe st...   \n",
              "\n",
              "                                                                      2      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...   \n",
              "cleaned_tweet             rt dawg rt ever fuck bitch start cry confused ...   \n",
              "\n",
              "                                                                      3      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  2   \n",
              "neither_count                                                             1   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...   \n",
              "cleaned_tweet                                           rt look like tranny   \n",
              "\n",
              "                                                                      4      \\\n",
              "count                                                                     6   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  6   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...   \n",
              "cleaned_tweet             rt shit hear might true might faker bitch told ya   \n",
              "\n",
              "                                                                      5      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         1   \n",
              "offensive_language_count                                                  2   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!!!!!!!!!!!!!!!\"@T_Madison_x: The shit just...   \n",
              "cleaned_tweet             shit blows meclaim faithful somebody still fuc...   \n",
              "\n",
              "                                                                      6      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!!!\"@__BrighterDays: I can not just sit up ...   \n",
              "cleaned_tweet                    sit hate another bitch got much shit going   \n",
              "\n",
              "                                                                      7      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     !!!!&#8220;@selfiequeenbri: cause I'm tired of...   \n",
              "cleaned_tweet             cause im tired big bitches coming us skinny girls   \n",
              "\n",
              "                                                                      8      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     \" &amp; you might not get ya bitch back &amp; ...   \n",
              "cleaned_tweet                         amp might get ya bitch back amp thats   \n",
              "\n",
              "                                                                      9      \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         1   \n",
              "offensive_language_count                                                  2   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     \" @rhythmixx_ :hobbies include: fighting Maria...   \n",
              "cleaned_tweet                         hobbies include fighting mariam bitch   \n",
              "\n",
              "                          ...                                  24773  \\\n",
              "count                     ...                                      3   \n",
              "hate_speech_count         ...                                      1   \n",
              "offensive_language_count  ...                                      2   \n",
              "neither_count             ...                                      0   \n",
              "class                     ...                                      1   \n",
              "tweet                     ...  you niggers cheat on ya gf's? smh....   \n",
              "cleaned_tweet             ...               niggers cheat ya gfs smh   \n",
              "\n",
              "                                                                      24774  \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     you really care bout dis bitch. my dick all in...   \n",
              "cleaned_tweet                   really care bout dis bitch dick yo feelings   \n",
              "\n",
              "                                                                     24775  \\\n",
              "count                                                                    3   \n",
              "hate_speech_count                                                        0   \n",
              "offensive_language_count                                                 3   \n",
              "neither_count                                                            0   \n",
              "class                                                                    1   \n",
              "tweet                     you worried bout other bitches, you need me for?   \n",
              "cleaned_tweet                                    worried bout bitches need   \n",
              "\n",
              "                                       24776  \\\n",
              "count                                      3   \n",
              "hate_speech_count                          3   \n",
              "offensive_language_count                   0   \n",
              "neither_count                              0   \n",
              "class                                      0   \n",
              "tweet                     you're all niggers   \n",
              "cleaned_tweet                  youre niggers   \n",
              "\n",
              "                                                                      24777  \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         2   \n",
              "offensive_language_count                                                  1   \n",
              "neither_count                                                             0   \n",
              "class                                                                     0   \n",
              "tweet                     you're such a retard i hope you get type 2 dia...   \n",
              "cleaned_tweet             youre retard hope get type diabetes die sugar ...   \n",
              "\n",
              "                                                                      24778  \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  2   \n",
              "neither_count                                                             1   \n",
              "class                                                                     1   \n",
              "tweet                     you's a muthaf***in lie &#8220;@LifeAsKing: @2...   \n",
              "cleaned_tweet             yous muthafin lie right tl trash mine bible sc...   \n",
              "\n",
              "                                                                      24779  \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  1   \n",
              "neither_count                                                             2   \n",
              "class                                                                     2   \n",
              "tweet                     you've gone and broke the wrong heart baby, an...   \n",
              "cleaned_tweet             youve gone broke wrong heart baby drove rednec...   \n",
              "\n",
              "                                                                      24780  \\\n",
              "count                                                                     3   \n",
              "hate_speech_count                                                         0   \n",
              "offensive_language_count                                                  3   \n",
              "neither_count                                                             0   \n",
              "class                                                                     1   \n",
              "tweet                     young buck wanna eat!!.. dat nigguh like I ain...   \n",
              "cleaned_tweet             young buck wanna eat dat nigguh like aint fuck...   \n",
              "\n",
              "                                                          24781  \\\n",
              "count                                                         6   \n",
              "hate_speech_count                                             0   \n",
              "offensive_language_count                                      6   \n",
              "neither_count                                                 0   \n",
              "class                                                         1   \n",
              "tweet                     youu got wild bitches tellin you lies   \n",
              "cleaned_tweet                 youu got wild bitches tellin lies   \n",
              "\n",
              "                                                                      24782  \n",
              "count                                                                     3  \n",
              "hate_speech_count                                                         0  \n",
              "offensive_language_count                                                  0  \n",
              "neither_count                                                             3  \n",
              "class                                                                     2  \n",
              "tweet                     ~~Ruffled | Ntac Eileen Dahlia - Beautiful col...  \n",
              "cleaned_tweet             ruffled ntac eileen dahlia beautiful color com...  \n",
              "\n",
              "[7 rows x 24783 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0446e39-a009-4140-8e6e-3b9a52844968\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>24773</th>\n",
              "      <th>24774</th>\n",
              "      <th>24775</th>\n",
              "      <th>24776</th>\n",
              "      <th>24777</th>\n",
              "      <th>24778</th>\n",
              "      <th>24779</th>\n",
              "      <th>24780</th>\n",
              "      <th>24781</th>\n",
              "      <th>24782</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hate_speech_count</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>offensive_language_count</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>neither_count</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tweet</th>\n",
              "      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n",
              "      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n",
              "      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n",
              "      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n",
              "      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n",
              "      <td>!!!!!!!!!!!!!!!!!!\"@T_Madison_x: The shit just...</td>\n",
              "      <td>!!!!!!\"@__BrighterDays: I can not just sit up ...</td>\n",
              "      <td>!!!!&amp;#8220;@selfiequeenbri: cause I'm tired of...</td>\n",
              "      <td>\" &amp;amp; you might not get ya bitch back &amp;amp; ...</td>\n",
              "      <td>\" @rhythmixx_ :hobbies include: fighting Maria...</td>\n",
              "      <td>...</td>\n",
              "      <td>you niggers cheat on ya gf's? smh....</td>\n",
              "      <td>you really care bout dis bitch. my dick all in...</td>\n",
              "      <td>you worried bout other bitches, you need me for?</td>\n",
              "      <td>you're all niggers</td>\n",
              "      <td>you're such a retard i hope you get type 2 dia...</td>\n",
              "      <td>you's a muthaf***in lie &amp;#8220;@LifeAsKing: @2...</td>\n",
              "      <td>you've gone and broke the wrong heart baby, an...</td>\n",
              "      <td>young buck wanna eat!!.. dat nigguh like I ain...</td>\n",
              "      <td>youu got wild bitches tellin you lies</td>\n",
              "      <td>~~Ruffled | Ntac Eileen Dahlia - Beautiful col...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cleaned_tweet</th>\n",
              "      <td>rt woman shouldnt complain cleaning house amp ...</td>\n",
              "      <td>rt boy dats coldtyga dwn bad cuffin dat hoe st...</td>\n",
              "      <td>rt dawg rt ever fuck bitch start cry confused ...</td>\n",
              "      <td>rt look like tranny</td>\n",
              "      <td>rt shit hear might true might faker bitch told ya</td>\n",
              "      <td>shit blows meclaim faithful somebody still fuc...</td>\n",
              "      <td>sit hate another bitch got much shit going</td>\n",
              "      <td>cause im tired big bitches coming us skinny girls</td>\n",
              "      <td>amp might get ya bitch back amp thats</td>\n",
              "      <td>hobbies include fighting mariam bitch</td>\n",
              "      <td>...</td>\n",
              "      <td>niggers cheat ya gfs smh</td>\n",
              "      <td>really care bout dis bitch dick yo feelings</td>\n",
              "      <td>worried bout bitches need</td>\n",
              "      <td>youre niggers</td>\n",
              "      <td>youre retard hope get type diabetes die sugar ...</td>\n",
              "      <td>yous muthafin lie right tl trash mine bible sc...</td>\n",
              "      <td>youve gone broke wrong heart baby drove rednec...</td>\n",
              "      <td>young buck wanna eat dat nigguh like aint fuck...</td>\n",
              "      <td>youu got wild bitches tellin lies</td>\n",
              "      <td>ruffled ntac eileen dahlia beautiful color com...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7 rows × 24783 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0446e39-a009-4140-8e6e-3b9a52844968')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a0446e39-a009-4140-8e6e-3b9a52844968 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a0446e39-a009-4140-8e6e-3b9a52844968');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a82a7f01-92ee-494d-b756-c8f611922f53\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a82a7f01-92ee-494d-b756-c8f611922f53')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a82a7f01-92ee-494d-b756-c8f611922f53 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Count of each class\n",
        "class_counts = df['class'].value_counts().sort_index()\n",
        "\n",
        "# Class labels for display\n",
        "class_labels = ['Hate Speech (0)', 'Offensive Language (1)', 'Neutral (2)']\n",
        "\n",
        "# Plotting\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.bar(class_labels, class_counts, edgecolor='black')\n",
        "plt.title('Class Distribution in Dataset')\n",
        "plt.xlabel('Class')\n",
        "plt.ylabel('Number of Tweets')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "bNq_5ZGosc4w",
        "outputId": "f66db95f-a808-4b2b-c3ba-b96d4994cce7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Split into features and labels\n",
        "X = df['cleaned_tweet']\n",
        "y = df['class']\n",
        "X.shape, y.shape"
      ],
      "metadata": {
        "id": "9BvHzJ2xtPM5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15e66c52-bd17-471c-ab99-a17861fd35e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((24783,), (24783,))"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# First convert text into vectors (TF-IDF) temporarily to apply SMOTE\n",
        "vectorizer = TfidfVectorizer(max_features=5000)\n",
        "X_vectorized = vectorizer.fit_transform(X)\n",
        "X_vectorized.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i_9J3WNy5GHi",
        "outputId": "473adc4d-fc78-473a-b140-286a3977c4ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(24783, 5000)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split into training and test sets before resampling\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42, stratify=y)\n",
        "X_train.shape, X_test.shape , y_train.shape, y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kC8naboE5GEG",
        "outputId": "54d61a54-1060-4f80-91f7-570be07c3e75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((19826, 5000), (4957, 5000), (19826,), (4957,))"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply SMOTE on training set only\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Display class distribution before and after SMOTE\n",
        "original_dist = y_train.value_counts().sort_index()\n",
        "resampled_dist = pd.Series(y_train_resampled).value_counts().sort_index()\n",
        "\n",
        "dist_df = pd.DataFrame({\n",
        "    \"Original\": original_dist,\n",
        "    \"After SMOTE\": resampled_dist\n",
        "})\n",
        "dist_df.index = ['Hate Speech (0)', 'Offensive Language (1)', 'Neutral (2)']"
      ],
      "metadata": {
        "id": "ObhtTwqn5GBl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check class distribution before and after SMOTE\n",
        "print(\"Before SMOTE:\\n\", y_train.value_counts())\n",
        "print(\"After SMOTE:\\n\", pd.Series(y_train_resampled).value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fyOkbl9g5F-_",
        "outputId": "699b5a26-ab62-4b3c-ff32-d217c233046f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before SMOTE:\n",
            " class\n",
            "1    15352\n",
            "2     3330\n",
            "0     1144\n",
            "Name: count, dtype: int64\n",
            "After SMOTE:\n",
            " class\n",
            "1    15352\n",
            "2    15352\n",
            "0    15352\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train Logistic Regression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "lr_model = LogisticRegression()\n",
        "lr_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "om6ynmwcvv0d",
        "outputId": "6aff15ef-b616-4c23-f06e-38cac3d45373"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict and evaluate\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "y_pred = lr_model.predict(X_test)\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "report = classification_report(y_test, y_pred, target_names=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "print(accuracy)\n",
        "print(report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XbtDdNL4v6H4",
        "outputId": "489cba13-e524-4ab9-d614-554d1b2d2959"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8942909017550938\n",
            "                 precision    recall  f1-score   support\n",
            "\n",
            "Hate Speech (0)       0.62      0.15      0.24       286\n",
            "  Offensive (1)       0.91      0.97      0.94      3838\n",
            "    Neutral (2)       0.84      0.81      0.83       833\n",
            "\n",
            "       accuracy                           0.89      4957\n",
            "      macro avg       0.79      0.64      0.67      4957\n",
            "   weighted avg       0.88      0.89      0.88      4957\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#parameter tuning for Logistic regression\n",
        "param_grid_lr = {\n",
        "    'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n",
        "    'C': [0.01, 0.1, 1, 10, 100],\n",
        "    'solver': ['liblinear', 'saga', 'newton-cg', 'lbfgs'],\n",
        "    'max_iter': [300, 650, 1000]\n",
        "}"
      ],
      "metadata": {
        "id": "IMA15M2XE1kU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tune_lr_model = GridSearchCV(estimator=lr_model , param_grid= param_grid_lr , cv=5 , scoring=\"accuracy\", verbose=2)\n",
        "tune_lr_model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "nexLkvJDFWs-",
        "outputId": "23f370b1-4c40-421c-b240-b9961462c832"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=2, estimator=LogisticRegression(),\n",
              "             param_grid={'C': [0.01, 0.1, 1, 10, 100],\n",
              "                         'max_iter': [300, 650, 1000],\n",
              "                         'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n",
              "                         'solver': ['liblinear', 'saga', 'newton-cg', 'lbfgs']},\n",
              "             scoring='accuracy', verbose=2)"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=2, estimator=LogisticRegression(),\n",
              "             param_grid={&#x27;C&#x27;: [0.01, 0.1, 1, 10, 100],\n",
              "                         &#x27;max_iter&#x27;: [300, 650, 1000],\n",
              "                         &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;, &#x27;none&#x27;],\n",
              "                         &#x27;solver&#x27;: [&#x27;liblinear&#x27;, &#x27;saga&#x27;, &#x27;newton-cg&#x27;, &#x27;lbfgs&#x27;]},\n",
              "             scoring=&#x27;accuracy&#x27;, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label  sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></div></label><div class=\"sk-toggleable__content \"><pre>GridSearchCV(cv=2, estimator=LogisticRegression(),\n",
              "             param_grid={&#x27;C&#x27;: [0.01, 0.1, 1, 10, 100],\n",
              "                         &#x27;max_iter&#x27;: [300, 650, 1000],\n",
              "                         &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;, &#x27;none&#x27;],\n",
              "                         &#x27;solver&#x27;: [&#x27;liblinear&#x27;, &#x27;saga&#x27;, &#x27;newton-cg&#x27;, &#x27;lbfgs&#x27;]},\n",
              "             scoring=&#x27;accuracy&#x27;, verbose=2)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label  sk-toggleable__label-arrow\"><div><div>estimator: LogisticRegression</div></div></label><div class=\"sk-toggleable__content \"><pre>LogisticRegression()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label  sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></div></label><div class=\"sk-toggleable__content \"><pre>LogisticRegression()</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tune_lr_model.fit(X_train , y_train)\n",
        "y_pred_tuned = tune_lr_model.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i5NbXKeFHItX",
        "outputId": "0622fd83-5f3d-4db7-f79b-e25f270d5260"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 2 folds for each of 240 candidates, totalling 480 fits\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=0.01, max_iter=300, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END ......C=0.01, max_iter=300, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=0.01, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=0.01, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=0.01, max_iter=300, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ......C=0.01, max_iter=300, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .C=0.01, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .....C=0.01, max_iter=300, penalty=l2, solver=lbfgs; total time=   0.2s\n",
            "[CV] END .....C=0.01, max_iter=300, penalty=l2, solver=lbfgs; total time=   0.2s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ....C=0.01, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ....C=0.01, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=0.01, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=0.01, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=0.01, max_iter=650, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END ......C=0.01, max_iter=650, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=0.01, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=0.01, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=0.01, max_iter=650, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ......C=0.01, max_iter=650, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .C=0.01, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .....C=0.01, max_iter=650, penalty=l2, solver=lbfgs; total time=   0.4s\n",
            "[CV] END .....C=0.01, max_iter=650, penalty=l2, solver=lbfgs; total time=   0.3s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ....C=0.01, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ....C=0.01, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=0.01, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=0.01, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=0.01, max_iter=1000, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END .....C=0.01, max_iter=1000, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=0.01, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=0.01, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=0.01, max_iter=1000, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .....C=0.01, max_iter=1000, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ....C=0.01, max_iter=1000, penalty=l2, solver=lbfgs; total time=   0.3s\n",
            "[CV] END ....C=0.01, max_iter=1000, penalty=l2, solver=lbfgs; total time=   0.2s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ...C=0.01, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ...C=0.01, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.01, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=0.01, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=0.01, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END .......C=0.1, max_iter=300, penalty=l1, solver=saga; total time=   0.3s\n",
            "[CV] END .......C=0.1, max_iter=300, penalty=l1, solver=saga; total time=   0.2s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=0.1, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=0.1, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END .......C=0.1, max_iter=300, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END .......C=0.1, max_iter=300, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END ..C=0.1, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.5s\n",
            "[CV] END ......C=0.1, max_iter=300, penalty=l2, solver=lbfgs; total time=   1.4s\n",
            "[CV] END ......C=0.1, max_iter=300, penalty=l2, solver=lbfgs; total time=   1.5s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=0.1, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .....C=0.1, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=0.1, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=0.1, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END .......C=0.1, max_iter=650, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END .......C=0.1, max_iter=650, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=0.1, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=0.1, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l2, solver=liblinear; total time=   0.0s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END .......C=0.1, max_iter=650, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .......C=0.1, max_iter=650, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ..C=0.1, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ......C=0.1, max_iter=650, penalty=l2, solver=lbfgs; total time=   0.5s\n",
            "[CV] END ......C=0.1, max_iter=650, penalty=l2, solver=lbfgs; total time=   0.6s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=0.1, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .....C=0.1, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=0.1, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=0.1, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=0.1, max_iter=1000, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END ......C=0.1, max_iter=1000, penalty=l1, solver=saga; total time=   0.1s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=0.1, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=0.1, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ......C=0.1, max_iter=1000, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ......C=0.1, max_iter=1000, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .C=0.1, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .....C=0.1, max_iter=1000, penalty=l2, solver=lbfgs; total time=   0.6s\n",
            "[CV] END .....C=0.1, max_iter=1000, penalty=l2, solver=lbfgs; total time=   0.7s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ....C=0.1, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ....C=0.1, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=0.1, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=0.1, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=0.1, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END .........C=1, max_iter=300, penalty=l1, solver=saga; total time=   1.4s\n",
            "[CV] END .........C=1, max_iter=300, penalty=l1, solver=saga; total time=   2.0s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ........C=1, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ........C=1, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END .........C=1, max_iter=300, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .........C=1, max_iter=300, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END ........C=1, max_iter=300, penalty=l2, solver=lbfgs; total time=   0.9s\n",
            "[CV] END ........C=1, max_iter=300, penalty=l2, solver=lbfgs; total time=   1.0s\n",
            "[CV] END C=1, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=1, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=1, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .......C=1, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .......C=1, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=1, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=1, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END .........C=1, max_iter=650, penalty=l1, solver=saga; total time=   1.8s\n",
            "[CV] END .........C=1, max_iter=650, penalty=l1, solver=saga; total time=   2.1s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ........C=1, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ........C=1, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END .........C=1, max_iter=650, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END .........C=1, max_iter=650, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ....C=1, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ........C=1, max_iter=650, penalty=l2, solver=lbfgs; total time=   1.0s\n",
            "[CV] END ........C=1, max_iter=650, penalty=l2, solver=lbfgs; total time=   1.0s\n",
            "[CV] END C=1, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=1, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=1, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .......C=1, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .......C=1, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=1, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=1, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=1, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.1s\n",
            "[CV] END ........C=1, max_iter=1000, penalty=l1, solver=saga; total time=   1.2s\n",
            "[CV] END ........C=1, max_iter=1000, penalty=l1, solver=saga; total time=   1.6s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .......C=1, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .......C=1, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ........C=1, max_iter=1000, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ........C=1, max_iter=1000, penalty=l2, solver=saga; total time=   0.1s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END ...C=1, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.1s\n",
            "[CV] END .......C=1, max_iter=1000, penalty=l2, solver=lbfgs; total time=   1.3s\n",
            "[CV] END .......C=1, max_iter=1000, penalty=l2, solver=lbfgs; total time=   1.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=1, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=1, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ......C=1, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=1, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=1, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=1, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l1, solver=liblinear; total time=   0.2s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l1, solver=liblinear; total time=   0.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END ........C=10, max_iter=300, penalty=l1, solver=saga; total time=  33.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END ........C=10, max_iter=300, penalty=l1, solver=saga; total time=  33.4s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .......C=10, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .......C=10, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ........C=10, max_iter=300, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END ........C=10, max_iter=300, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.3s\n",
            "[CV] END ...C=10, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END .......C=10, max_iter=300, penalty=l2, solver=lbfgs; total time=   2.8s\n",
            "[CV] END .......C=10, max_iter=300, penalty=l2, solver=lbfgs; total time=   3.1s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=10, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=10, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ......C=10, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=10, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=10, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l1, solver=liblinear; total time=   0.2s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l1, solver=liblinear; total time=   0.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END ........C=10, max_iter=650, penalty=l1, solver=saga; total time=  58.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END ........C=10, max_iter=650, penalty=l1, solver=saga; total time= 1.1min\n",
            "[CV] END ...C=10, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .......C=10, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .......C=10, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ........C=10, max_iter=650, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END ........C=10, max_iter=650, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END ...C=10, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END .......C=10, max_iter=650, penalty=l2, solver=lbfgs; total time=   1.7s\n",
            "[CV] END .......C=10, max_iter=650, penalty=l2, solver=lbfgs; total time=   1.3s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=10, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ......C=10, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ......C=10, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=10, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=10, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=10, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.2s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.2s\n",
            "[CV] END .......C=10, max_iter=1000, penalty=l1, solver=saga; total time= 1.2min\n",
            "[CV] END .......C=10, max_iter=1000, penalty=l1, solver=saga; total time= 1.8min\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=10, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=10, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.1s\n",
            "[CV] END .......C=10, max_iter=1000, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END .......C=10, max_iter=1000, penalty=l2, solver=saga; total time=   0.2s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END ..C=10, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.2s\n",
            "[CV] END ......C=10, max_iter=1000, penalty=l2, solver=lbfgs; total time=   1.9s\n",
            "[CV] END ......C=10, max_iter=1000, penalty=l2, solver=lbfgs; total time=   1.5s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=10, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .....C=10, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=10, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=10, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=10, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l1, solver=liblinear; total time=   0.5s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l1, solver=liblinear; total time=   0.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END .......C=100, max_iter=300, penalty=l1, solver=saga; total time= 1.4min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END .......C=100, max_iter=300, penalty=l1, solver=saga; total time= 1.6min\n",
            "[CV] END ..C=100, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=100, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=100, max_iter=300, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l2, solver=liblinear; total time=   0.3s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l2, solver=liblinear; total time=   0.3s\n",
            "[CV] END .......C=100, max_iter=300, penalty=l2, solver=saga; total time=   1.6s\n",
            "[CV] END .......C=100, max_iter=300, penalty=l2, solver=saga; total time=   1.2s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.4s\n",
            "[CV] END ..C=100, max_iter=300, penalty=l2, solver=newton-cg; total time=   0.4s\n",
            "[CV] END ......C=100, max_iter=300, penalty=l2, solver=lbfgs; total time=   2.0s\n",
            "[CV] END ......C=100, max_iter=300, penalty=l2, solver=lbfgs; total time=   1.7s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=100, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .....C=100, max_iter=300, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=300, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=100, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=100, max_iter=300, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l1, solver=liblinear; total time=   0.5s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l1, solver=liblinear; total time=   0.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END .......C=100, max_iter=650, penalty=l1, solver=saga; total time= 2.3min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END .......C=100, max_iter=650, penalty=l1, solver=saga; total time= 2.7min\n",
            "[CV] END ..C=100, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ......C=100, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ......C=100, max_iter=650, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l2, solver=liblinear; total time=   0.2s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l2, solver=liblinear; total time=   0.2s\n",
            "[CV] END .......C=100, max_iter=650, penalty=l2, solver=saga; total time=   0.8s\n",
            "[CV] END .......C=100, max_iter=650, penalty=l2, solver=saga; total time=   1.1s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.4s\n",
            "[CV] END ..C=100, max_iter=650, penalty=l2, solver=newton-cg; total time=   0.4s\n",
            "[CV] END ......C=100, max_iter=650, penalty=l2, solver=lbfgs; total time=   3.6s\n",
            "[CV] END ......C=100, max_iter=650, penalty=l2, solver=lbfgs; total time=   3.5s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END .....C=100, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END .....C=100, max_iter=650, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=650, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ....C=100, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ....C=100, max_iter=650, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.5s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l1, solver=liblinear; total time=   0.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END ......C=100, max_iter=1000, penalty=l1, solver=saga; total time= 3.1min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[CV] END ......C=100, max_iter=1000, penalty=l1, solver=saga; total time= 3.6min\n",
            "[CV] END .C=100, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l1, solver=newton-cg; total time=   0.0s\n",
            "[CV] END .....C=100, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .....C=100, max_iter=1000, penalty=l1, solver=lbfgs; total time=   0.0s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.2s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l2, solver=liblinear; total time=   0.2s\n",
            "[CV] END ......C=100, max_iter=1000, penalty=l2, solver=saga; total time=   1.7s\n",
            "[CV] END ......C=100, max_iter=1000, penalty=l2, solver=saga; total time=   1.9s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.6s\n",
            "[CV] END .C=100, max_iter=1000, penalty=l2, solver=newton-cg; total time=   0.4s\n",
            "[CV] END .....C=100, max_iter=1000, penalty=l2, solver=lbfgs; total time=   2.1s\n",
            "[CV] END .....C=100, max_iter=1000, penalty=l2, solver=lbfgs; total time=   1.8s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=elasticnet, solver=lbfgs; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=none, solver=liblinear; total time=   0.0s\n",
            "[CV] END ....C=100, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END ....C=100, max_iter=1000, penalty=none, solver=saga; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END C=100, max_iter=1000, penalty=none, solver=newton-cg; total time=   0.0s\n",
            "[CV] END ...C=100, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n",
            "[CV] END ...C=100, max_iter=1000, penalty=none, solver=lbfgs; total time=   0.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:528: FitFailedWarning: \n",
            "300 fits failed out of a total of 480.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1193, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 63, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver newton-cg supports only 'l2' or None penalties, got l1 penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1193, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 63, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver lbfgs supports only 'l2' or None penalties, got l1 penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1193, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 71, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1203, in fit\n",
            "    raise ValueError(\"l1_ratio must be specified when penalty is elasticnet.\")\n",
            "ValueError: l1_ratio must be specified when penalty is elasticnet.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1193, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 63, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver newton-cg supports only 'l2' or None penalties, got elasticnet penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "30 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1389, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1193, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 63, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver lbfgs supports only 'l2' or None penalties, got elasticnet penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "120 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1382, in wrapper\n",
            "    estimator._validate_params()\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 436, in _validate_params\n",
            "    validate_parameter_constraints(\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\", line 98, in validate_parameter_constraints\n",
            "    raise InvalidParameterError(\n",
            "sklearn.utils._param_validation.InvalidParameterError: The 'penalty' parameter of LogisticRegression must be a str among {'l1', 'elasticnet', 'l2'} or None. Got 'none' instead.\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1108: UserWarning: One or more of the test scores are non-finite: [0.77433673 0.77433673        nan        nan 0.77433673 0.77433673\n",
            " 0.77433673 0.77433673        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.77433673 0.77433673\n",
            "        nan        nan 0.77433673 0.77433673 0.77433673 0.77433673\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan 0.77433673 0.77433673        nan        nan\n",
            " 0.77433673 0.77433673 0.77433673 0.77433673        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            " 0.8286089  0.83062645        nan        nan 0.78240694 0.80813074\n",
            " 0.80797942 0.80797942        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.8286089  0.83062645\n",
            "        nan        nan 0.78240694 0.8080803  0.80797942 0.80797942\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan 0.8286089  0.83062645        nan        nan\n",
            " 0.78240694 0.8080803  0.80797942 0.80797942        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            " 0.90129123 0.90381317        nan        nan 0.87723192 0.88671442\n",
            " 0.88661354 0.88626047        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.90129123 0.90381317\n",
            "        nan        nan 0.87723192 0.88666398 0.88661354 0.88626047\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan 0.90129123 0.90376274        nan        nan\n",
            " 0.87723192 0.88661354 0.88661354 0.88626047        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            " 0.88207404 0.88414204        nan        nan 0.88676485 0.88610915\n",
            " 0.88605871 0.88641178        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.88207404 0.88343589\n",
            "        nan        nan 0.88676485 0.88621003 0.88605871 0.88641178\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan 0.88207404 0.88298194        nan        nan\n",
            " 0.88676485 0.88621003 0.88605871 0.88641178        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            " 0.84263089 0.85403006        nan        nan 0.86437002 0.86295773\n",
            " 0.86255422 0.87128014        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.84232826 0.85155856\n",
            "        nan        nan 0.86437002 0.86300817 0.86255422 0.87128014\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan 0.84232826 0.85105417        nan        nan\n",
            " 0.86437002 0.86280642 0.86255422 0.87128014        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan]\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tune_lr_model.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s9O0FrMkJQo4",
        "outputId": "2ad4c119-cb0a-49a3-f585-438f1206aa57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 1, 'max_iter': 300, 'penalty': 'l1', 'solver': 'saga'}"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tune_lr_model.best_score_"
      ],
      "metadata": {
        "id": "w_-XRulNQQgV",
        "outputId": "839fa22c-c718-4767-9467-aed673d4e9d1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.9038131746191869)"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conf_matrix_tuned = confusion_matrix(y_test, y_pred_tuned)"
      ],
      "metadata": {
        "id": "Xf7pLwBLMJb9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix(Before tuning)')\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix_tuned, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix(After tuning)')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "i_E_lC8q6G04",
        "outputId": "2392bb19-0c08-41a5-b285-e9d8ce9bbc21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid_svm = {\n",
        "    'C': [0.01, 0.1, 1, 10, 100],     # Regularization strength\n",
        "    'penalty': ['l2'],                # 'l1' is only supported with 'liblinear', which isn't the default\n",
        "    'loss': ['squared_hinge'],        # 'hinge' is also available but less common for modern usage\n",
        "    'max_iter': [1000, 5000, 10000],  # Just in case convergence is an issue\n",
        "}"
      ],
      "metadata": {
        "id": "WDTJkTRUKuP5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "# Train SVM (Linear Support Vector Classifier)\n",
        "svm_model = LinearSVC(class_weight='balanced', max_iter=10000)\n",
        "svm_model.fit(X_train, y_train)\n",
        "svm_preds = svm_model.predict(X_test)\n",
        "\n",
        "# Evaluation\n",
        "svm_accuracy = accuracy_score(y_test, svm_preds)\n",
        "\n",
        "svm_report = classification_report(y_test, svm_preds, target_names=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "print(svm_report)\n",
        "print(\" accuracy :\",svm_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mZmB1n7BwQM8",
        "outputId": "0ea7af38-f11a-4244-ce1c-51640ce93aa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 precision    recall  f1-score   support\n",
            "\n",
            "Hate Speech (0)       0.38      0.43      0.40       286\n",
            "  Offensive (1)       0.94      0.92      0.93      3838\n",
            "    Neutral (2)       0.80      0.87      0.84       833\n",
            "\n",
            "       accuracy                           0.88      4957\n",
            "      macro avg       0.71      0.74      0.72      4957\n",
            "   weighted avg       0.89      0.88      0.88      4957\n",
            "\n",
            " accuracy : 0.8799677224127497\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "svm_tuned_model = GridSearchCV(svm_model, param_grid_svm, cv=5, scoring='accuracy', verbose=2, n_jobs=-1)\n",
        "svm_tuned_model.fit(X_train, y_train)\n",
        "svm_preds_tuned = svm_tuned_model.predict(X_test)\n",
        "\n",
        "print(\"Best parameters found:\", svm_tuned_model.best_params_)\n",
        "print(\"Best cross-validation score:\", svm_tuned_model.best_score_)"
      ],
      "metadata": {
        "id": "ms1AcwtPNwZO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "svm_conf_matrix = confusion_matrix(y_test, svm_preds)\n",
        "svm_tuned_conf_matrix = confusion_matrix(y_test, svm_preds_tuned)"
      ],
      "metadata": {
        "id": "3RooJIgz-DZ8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot confusion matrix before tuning\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(svm_conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix(before tuning)')\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "# Plot confusion matrix after tuning\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(svm_tuned_conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix(After tuning)')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "iD5yccqv-uJ0",
        "outputId": "702de245-969d-4b6b-a311-15145af8691a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid_rf = {\n",
        "    'n_estimators': [100, 200, 500],             # Number of trees\n",
        "    'max_depth': [None, 10, 20, 30, 50],         # Max depth of the tree\n",
        "    'min_samples_split': [2, 5, 10],             # Minimum samples required to split an internal node\n",
        "    'min_samples_leaf': [1, 2, 4],               # Minimum samples required to be at a leaf node\n",
        "    'max_features': ['sqrt', 'log2', None],      # Number of features to consider at each split\n",
        "    'bootstrap': [True, False],                  # Whether bootstrap samples are used\n",
        "}"
      ],
      "metadata": {
        "id": "ATQcFzUSPtTJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Train Random Forest\n",
        "rf_model = RandomForestClassifier(class_weight='balanced', random_state=42)\n",
        "rf_model.fit(X_train, y_train)\n",
        "rf_preds = rf_model.predict(X_test)\n",
        "rf_accuracy = accuracy_score(y_test, rf_preds)\n",
        "rf_accuracy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WrQpjRa66uT2",
        "outputId": "74717c2e-38ad-4507-c489-c41df4f30d51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8997377446035909"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_report = classification_report(y_test, rf_preds, target_names=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "print(rf_report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rkls4CiY6uQY",
        "outputId": "3fe54036-63f0-49cc-f94f-d14d696c2867"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 precision    recall  f1-score   support\n",
            "\n",
            "Hate Speech (0)       0.53      0.22      0.31       286\n",
            "  Offensive (1)       0.93      0.95      0.94      3838\n",
            "    Neutral (2)       0.81      0.91      0.86       833\n",
            "\n",
            "       accuracy                           0.90      4957\n",
            "      macro avg       0.76      0.69      0.70      4957\n",
            "   weighted avg       0.89      0.90      0.89      4957\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_model_tuned = GridSearchCV(estimator=rf_model, param_grid=param_grid_rf,\n",
        "                           cv=5, scoring='accuracy', n_jobs=-1, verbose=2)\n",
        "rf_model_tuned.fit(X_train, y_train)\n",
        "rf_preds_tuned = rf_model.predict(X_test)\n",
        "rf_model_tuned.best_params_"
      ],
      "metadata": {
        "id": "SY6LLynTP5_4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_model_tuned.best_score_"
      ],
      "metadata": {
        "id": "LvGUkL6rRNTc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_conf_matrix = confusion_matrix(y_test, rf_preds)\n",
        "rf_conf_matrix_tuned = confusion_matrix(y_test, rf_preds_tuned)"
      ],
      "metadata": {
        "id": "Nxxv95EJ6uNq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot confusion matrix before tuning\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(rf_conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot confusion matrix after tuning\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(rf_conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "axrw3Obv6uK1",
        "outputId": "db253740-8a3f-4abf-9351-27beac4ac458"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout , Conv1D , GlobalMaxPooling1D\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "pMK1M4TGw3nt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "max_words = 5000\n",
        "max_len = 100"
      ],
      "metadata": {
        "id": "c_dGrMVFxQX3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer = Tokenizer(num_words=max_words, oov_token=\"<OOV>\")\n",
        "tokenizer.fit_on_texts(df['cleaned_tweet'])\n",
        "X_seq = tokenizer.texts_to_sequences(df['cleaned_tweet'])\n",
        "X_pad = pad_sequences(X_seq, maxlen=max_len, padding='post')"
      ],
      "metadata": {
        "id": "OTP5LWqCyHxW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Encode labels\n",
        "label_encoder = LabelEncoder()\n",
        "y_encoded = label_encoder.fit_transform(df['class'])\n",
        "y_cat = to_categorical(y_encoded)"
      ],
      "metadata": {
        "id": "N-3vEFlCyN0e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Train-test split\n",
        "X_train_dl, X_test_dl, y_train_dl, y_test_dl = train_test_split(X_pad, y_cat, test_size=0.2, random_state=42, stratify=y_encoded)"
      ],
      "metadata": {
        "id": "Ns3SEprQyRKX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Build LSTM Model\n",
        "model = Sequential()\n",
        "model.add(Embedding(input_dim=max_words, output_dim=64, input_length=max_len))\n",
        "model.add(LSTM(64, return_sequences=False))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(32, activation='relu'))\n",
        "model.add(Dense(3, activation='softmax'))\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_s2wntCLyWjN",
        "outputId": "151a6732-84b2-4de1-92da-80ba12096aa1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Train the Model\n",
        "history = model.fit(X_train_dl, y_train_dl, epochs=2, batch_size=64, validation_split=0.2, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qUISTJj_ybLS",
        "outputId": "96edbd7c-e8ac-4e4c-9e98-1a4d8bb70b4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/2\n",
            "\u001b[1m248/248\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m31s\u001b[0m 126ms/step - accuracy: 0.7707 - loss: 0.6784 - val_accuracy: 0.7779 - val_loss: 0.6572\n",
            "Epoch 2/2\n",
            "\u001b[1m248/248\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 92ms/step - accuracy: 0.7750 - loss: 0.6713 - val_accuracy: 0.7779 - val_loss: 0.6676\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluate\n",
        "y_pred_dl = model.predict(X_test_dl)\n",
        "y_pred_labels = np.argmax(y_pred_dl, axis=1)\n",
        "y_true_labels = np.argmax(y_test_dl, axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m8Z1_So6zIF1",
        "outputId": "98e9350f-fcad-46cf-f1ed-483a9eb66b4c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dl_accuracy = accuracy_score(y_true_labels, y_pred_labels)\n",
        "dl_report = classification_report(y_true_labels, y_pred_labels, target_names=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "\n",
        "print(dl_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m2w-CgZBzbO2",
        "outputId": "1d509728-50b7-473c-e2b6-2a2ccbee105e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7742586241678434\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(dl_report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TVALSLQzzpDA",
        "outputId": "efba3224-a90c-4244-9711-599f57fb4d72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 precision    recall  f1-score   support\n",
            "\n",
            "Hate Speech (0)       0.00      0.00      0.00       286\n",
            "  Offensive (1)       0.77      1.00      0.87      3838\n",
            "    Neutral (2)       0.00      0.00      0.00       833\n",
            "\n",
            "       accuracy                           0.77      4957\n",
            "      macro avg       0.26      0.33      0.29      4957\n",
            "   weighted avg       0.60      0.77      0.68      4957\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nn_conf_matrix = confusion_matrix(y_true_labels, y_pred_labels)\n",
        "nn_conf_matrix"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BRVbFy_eBuua",
        "outputId": "60aa8725-746b-4c39-d2cf-0b141b96f024"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   0,  286,    0],\n",
              "       [   0, 3838,    0],\n",
              "       [   0,  833,    0]])"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.heatmap(nn_conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "tUM9X-llCEPN",
        "outputId": "45fe6bb9-ac09-406d-fa89-ca6bdbfcce32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy:\", accuracy_score(y_true_labels, y_pred_labels))\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_true_labels, y_pred_labels, target_names=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gsYQ8Gth0AFK",
        "outputId": "8116d06f-3d10-44b7-a977-6d2b328dfd7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7742586241678434\n",
            "\n",
            "Classification Report:\n",
            "                  precision    recall  f1-score   support\n",
            "\n",
            "Hate Speech (0)       0.00      0.00      0.00       286\n",
            "  Offensive (1)       0.77      1.00      0.87      3838\n",
            "    Neutral (2)       0.00      0.00      0.00       833\n",
            "\n",
            "       accuracy                           0.77      4957\n",
            "      macro avg       0.26      0.33      0.29      4957\n",
            "   weighted avg       0.60      0.77      0.68      4957\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 4))\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n",
        "plt.title('Model Accuracy over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "xrOzbCva0Qqe",
        "outputId": "d6f15988-aa41-4a50-f374-39693be555f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 4))\n",
        "plt.plot(history.history['loss'], label='Train Loss')\n",
        "plt.plot(history.history['val_loss'], label='Val Loss')\n",
        "plt.title('Model Loss over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "3pIiLdB70vvV",
        "outputId": "32c7c70e-8155-4b69-f962-e49799b70dd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CNN Model Architecture\n",
        "model = Sequential()\n",
        "model.add(Embedding(input_dim=max_words, output_dim=64, input_length=max_len))\n",
        "model.add(Conv1D(filters=128, kernel_size=5, activation='relu'))\n",
        "model.add(GlobalMaxPooling1D())\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(32, activation='relu'))\n",
        "model.add(Dense(3, activation='softmax'))\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "y6g9vS2T0-r5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6867463b-d351-47d5-ca77-d20d92e0f409"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the CNN model\n",
        "history_cnn = model.fit(X_train_dl, y_train_dl, epochs=2, batch_size=64, validation_split=0.2, verbose=1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "smnCdRe71lVX",
        "outputId": "96f63834-9d1d-4ff9-e728-938e212f1632"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/2\n",
            "\u001b[1m248/248\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 52ms/step - accuracy: 0.7494 - loss: 0.6550 - val_accuracy: 0.9112 - val_loss: 0.2722\n",
            "Epoch 2/2\n",
            "\u001b[1m248/248\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 53ms/step - accuracy: 0.9093 - loss: 0.2831 - val_accuracy: 0.9019 - val_loss: 0.2651\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the CNN model\n",
        "y_pred_cnn = model.predict(X_test_dl)\n",
        "y_pred_labels_cnn = np.argmax(y_pred_dl, axis=1)\n",
        "y_true_labels_cnn = np.argmax(y_test_dl, axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vLWL2HJ_4DeJ",
        "outputId": "1467178c-a9b6-4ac4-c7ff-5a254fdeb33b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m155/155\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"CNN Accuracy:\", accuracy_score(y_true_labels_cnn, y_pred_labels_cnn))\n",
        "print(\"\\nCNN Classification Report:\\n\", classification_report(y_true_labels, y_pred_labels, target_names=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pccjcKlB4ISB",
        "outputId": "a46bb52e-5078-460b-9183-3aea0fc1821c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CNN Accuracy: 0.7742586241678434\n",
            "\n",
            "CNN Classification Report:\n",
            "                  precision    recall  f1-score   support\n",
            "\n",
            "Hate Speech (0)       0.00      0.00      0.00       286\n",
            "  Offensive (1)       0.77      1.00      0.87      3838\n",
            "    Neutral (2)       0.00      0.00      0.00       833\n",
            "\n",
            "       accuracy                           0.77      4957\n",
            "      macro avg       0.26      0.33      0.29      4957\n",
            "   weighted avg       0.60      0.77      0.68      4957\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_conf_matrix = confusion_matrix(y_true_labels_cnn, y_pred_labels_cnn)"
      ],
      "metadata": {
        "id": "asedIR-UDs4Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cnn_conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'],\n",
        "            yticklabels=['Hate Speech (0)', 'Offensive (1)', 'Neutral (2)'])\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "gWYXUFuvEHVu",
        "outputId": "0640b681-debe-45fc-8c8b-c6a477dbc92b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}